// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResearchCruiseApp_API.Infrastructure.Persistence;

#nullable disable

namespace ResearchCruiseApp_API.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241008190905_AddInsuranceDates")]
    partial class AddInsuranceDates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrewMemberFormB", b =>
                {
                    b.Property<Guid>("CrewMembersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormsBId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CrewMembersId", "FormsBId");

                    b.HasIndex("FormsBId");

                    b.ToTable("CrewMemberFormB");
                });

            modelBuilder.Entity("FormBShipEquipment", b =>
                {
                    b.Property<Guid>("FormsBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShipEquipmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormsBId", "ShipEquipmentsId");

                    b.HasIndex("ShipEquipmentsId");

                    b.ToTable("FormBShipEquipment");
                });

            modelBuilder.Entity("FormCShipEquipment", b =>
                {
                    b.Property<Guid>("FormsCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShipEquipmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormsCId", "ShipEquipmentsId");

                    b.HasIndex("ShipEquipmentsId");

                    b.ToTable("FormCShipEquipment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.CollectedSample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Analysis")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid?>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Publishing")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FormCId");

                    b.ToTable("CollectedSamples");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid?>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InstitutionLocalization")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("InstitutionUnit")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<byte[]>("ScanContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ScanName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FormCId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.CrewMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("DocumentExpiryDate")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("CrewMembers");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Cruise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MainCruiseManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MainDeputyManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cruises");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.CruiseApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CruiseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("FormAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<byte[]>("SupervisorCode")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("CruiseId");

                    b.HasIndex("FormAId");

                    b.HasIndex("FormBId");

                    b.HasIndex("FormCId");

                    b.ToTable("CruiseApplications");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.CruiseApplicationEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CruiseApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EffectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CruiseApplicationId");

                    b.HasIndex("EffectId");

                    b.ToTable("CruiseApplicationEffects");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.CruiseDayDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid?>("FormBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hours")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FormBId");

                    b.HasIndex("FormCId");

                    b.ToTable("CruiseDaysDetails");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcceptablePeriodBeg")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("AcceptablePeriodEnd")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CruiseGoal")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CruiseGoalDescription")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("CruiseHours")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("CruiseManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeputyManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DifferentUsage")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OptimalPeriodBeg")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("OptimalPeriodEnd")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("PeriodNotes")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("ResearchAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResearchAreaInfo")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ShipUsage")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("SupervisorEmail")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("UgUnitsPoints")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("ResearchAreaId");

                    b.ToTable("FormsA");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormAContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("FormAId");

                    b.ToTable("FormAContract");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormAGuestUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuestUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoOfPersons")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FormAId");

                    b.HasIndex("GuestUnitId");

                    b.ToTable("FormAGuestUnits");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormAPublication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormAId");

                    b.HasIndex("PublicationId");

                    b.ToTable("FormAPublications");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormAResearchTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("ResearchTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormAId");

                    b.HasIndex("ResearchTaskId");

                    b.ToTable("FormAResearchTasks");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormASpubTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("SpubTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormAId");

                    b.HasIndex("SpubTaskId");

                    b.ToTable("FormASpubTasks");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormAUgUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoOfEmployees")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("NoOfStudents")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("UgUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormAId");

                    b.HasIndex("UgUnitId");

                    b.ToTable("FormAUgUnits");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormB", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IsCruiseManagerPresent")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid?>("ResearchAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResearchAreaId");

                    b.ToTable("FormsB");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBGuestUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuestUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoOfPersons")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FormBId");

                    b.HasIndex("GuestUnitId");

                    b.ToTable("FormBGuestUnits");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBLongResearchEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("FormBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResearchEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormBId");

                    b.HasIndex("ResearchEquipmentId");

                    b.ToTable("FormBLongResearchEquipments");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBPort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("FormBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FormBId");

                    b.HasIndex("PortId");

                    b.ToTable("FormBPorts");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBResearchEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InsuranceEndDate")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("InsuranceStartDate")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("ResearchEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormBId");

                    b.HasIndex("ResearchEquipmentId");

                    b.ToTable("FormBResearchEquipments");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBShortResearchEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("FormBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResearchEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FormBId");

                    b.HasIndex("ResearchEquipmentId");

                    b.ToTable("FormBShortResearchEquipments");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBUgUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoOfEmployees")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("NoOfStudents")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("UgUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormBId");

                    b.HasIndex("UgUnitId");

                    b.ToTable("FormBUgUnits");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalDescription")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("AdditionalSpubData")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("ResearchAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShipUsage")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("ResearchAreaId");

                    b.ToTable("FormsC");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCGuestUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuestUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoOfPersons")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FormCId");

                    b.HasIndex("GuestUnitId");

                    b.ToTable("FormGuestUnits");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCLongResearchEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResearchEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormCId");

                    b.HasIndex("ResearchEquipmentId");

                    b.ToTable("FormCLongResearchEquipments");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCPort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FormCId");

                    b.HasIndex("PortId");

                    b.ToTable("FormCPorts");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCResearchEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Insurance")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("ResearchEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormCId");

                    b.HasIndex("ResearchEquipmentId");

                    b.ToTable("FormCResearchEquipments");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCResearchTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeputyConditionMet")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Done")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ManagerConditionMet")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("ResearchTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormCId");

                    b.HasIndex("ResearchTaskId");

                    b.ToTable("FormCResearchTasks");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCShortResearchEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResearchEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FormCId");

                    b.HasIndex("ResearchEquipmentId");

                    b.ToTable("FormCShortResearchEquipments");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCSpubTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpubTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormCId");

                    b.HasIndex("SpubTaskId");

                    b.ToTable("FormCSpubTasks");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCUgUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoOfEmployees")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("NoOfStudents")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("UgUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormCId");

                    b.HasIndex("UgUnitId");

                    b.ToTable("FormCUgUnits");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.GuestUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("GuestUnits");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Executive")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid?>("FormAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ScanContent")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varbinary(1024)");

                    b.Property<string>("ScanName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("FormAId");

                    b.HasIndex("FormBId");

                    b.HasIndex("FormCId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Port", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Doi")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Magazine")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("MinisterialPoints")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.ResearchArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("ResearchAreas");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.ResearchEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("ResearchEquipments");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.ResearchTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Date")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("EndDate")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("FinancingAmount")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("FinancingApproved")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Institution")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("MinisterialPoints")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("SecuredAmount")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("StartDate")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Title")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ResearchTasks");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.ShipEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("ShipEquipments");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.SpubTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("YearFrom")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("YearTo")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("SpubTasks");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.UgUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("UgUnits");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Infrastructure.Services.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CrewMemberFormB", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.CrewMember", null)
                        .WithMany()
                        .HasForeignKey("CrewMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormB", null)
                        .WithMany()
                        .HasForeignKey("FormsBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormBShipEquipment", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormB", null)
                        .WithMany()
                        .HasForeignKey("FormsBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ShipEquipment", null)
                        .WithMany()
                        .HasForeignKey("ShipEquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormCShipEquipment", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", null)
                        .WithMany()
                        .HasForeignKey("FormsCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ShipEquipment", null)
                        .WithMany()
                        .HasForeignKey("ShipEquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Infrastructure.Services.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Infrastructure.Services.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Infrastructure.Services.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Infrastructure.Services.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.CollectedSample", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", null)
                        .WithMany("CollectedSamples")
                        .HasForeignKey("FormCId");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Contract", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", null)
                        .WithMany("Contracts")
                        .HasForeignKey("FormCId");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.CruiseApplication", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.Cruise", null)
                        .WithMany("CruiseApplications")
                        .HasForeignKey("CruiseId");

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormA", "FormA")
                        .WithMany()
                        .HasForeignKey("FormAId");

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormB", "FormB")
                        .WithMany()
                        .HasForeignKey("FormBId");

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", "FormC")
                        .WithMany()
                        .HasForeignKey("FormCId");

                    b.Navigation("FormA");

                    b.Navigation("FormB");

                    b.Navigation("FormC");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.CruiseApplicationEffect", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.CruiseApplication", "CruiseApplication")
                        .WithMany("CruiseApplicationEffects")
                        .HasForeignKey("CruiseApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormCResearchTask", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CruiseApplication");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.CruiseDayDetails", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormB", null)
                        .WithMany("CruiseDaysDetails")
                        .HasForeignKey("FormBId");

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", null)
                        .WithMany("CruiseDaysDetails")
                        .HasForeignKey("FormCId");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormA", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ResearchArea", "ResearchArea")
                        .WithMany("FormsA")
                        .HasForeignKey("ResearchAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchArea");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormAContract", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.Contract", "Contract")
                        .WithMany("FormAContracts")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormA", "FormA")
                        .WithMany("FormAContracts")
                        .HasForeignKey("FormAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("FormA");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormAGuestUnit", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormA", "FormA")
                        .WithMany("FormAGuestUnits")
                        .HasForeignKey("FormAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.GuestUnit", "GuestUnit")
                        .WithMany("FormAGuestUnits")
                        .HasForeignKey("GuestUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormA");

                    b.Navigation("GuestUnit");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormAPublication", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormA", "FormA")
                        .WithMany("FormAPublications")
                        .HasForeignKey("FormAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.Publication", "Publication")
                        .WithMany("FormAPublications")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormA");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormAResearchTask", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormA", "FormA")
                        .WithMany("FormAResearchTasks")
                        .HasForeignKey("FormAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ResearchTask", "ResearchTask")
                        .WithMany("FormAResearchTasks")
                        .HasForeignKey("ResearchTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormA");

                    b.Navigation("ResearchTask");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormASpubTask", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormA", "FormA")
                        .WithMany("FormASpubTasks")
                        .HasForeignKey("FormAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.SpubTask", "SpubTask")
                        .WithMany("FormASpubTasks")
                        .HasForeignKey("SpubTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormA");

                    b.Navigation("SpubTask");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormAUgUnit", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormA", "FormA")
                        .WithMany("FormAUgUnits")
                        .HasForeignKey("FormAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.UgUnit", "UgUnit")
                        .WithMany("FormAUgUnits")
                        .HasForeignKey("UgUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormA");

                    b.Navigation("UgUnit");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormB", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ResearchArea", null)
                        .WithMany("FormsB")
                        .HasForeignKey("ResearchAreaId");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBGuestUnit", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormB", "FormB")
                        .WithMany("FormBGuestUnits")
                        .HasForeignKey("FormBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.GuestUnit", "GuestUnit")
                        .WithMany("FormBGuestUnits")
                        .HasForeignKey("GuestUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormB");

                    b.Navigation("GuestUnit");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBLongResearchEquipment", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormB", "FormB")
                        .WithMany("FormBLongResearchEquipments")
                        .HasForeignKey("FormBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ResearchEquipment", "ResearchEquipment")
                        .WithMany("FormBLongResearchEquipments")
                        .HasForeignKey("ResearchEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormB");

                    b.Navigation("ResearchEquipment");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBPort", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormB", "FormB")
                        .WithMany("FormBPorts")
                        .HasForeignKey("FormBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.Port", "Port")
                        .WithMany("FormBPorts")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormB");

                    b.Navigation("Port");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBResearchEquipment", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormB", "FormB")
                        .WithMany("FormBResearchEquipments")
                        .HasForeignKey("FormBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ResearchEquipment", "ResearchEquipment")
                        .WithMany("FormBResearchEquipments")
                        .HasForeignKey("ResearchEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormB");

                    b.Navigation("ResearchEquipment");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBShortResearchEquipment", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormB", "FormB")
                        .WithMany("FormBShortResearchEquipments")
                        .HasForeignKey("FormBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ResearchEquipment", "ResearchEquipment")
                        .WithMany("FormBShortResearchEquipments")
                        .HasForeignKey("ResearchEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormB");

                    b.Navigation("ResearchEquipment");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormBUgUnit", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormB", "FormB")
                        .WithMany("FormBUgUnits")
                        .HasForeignKey("FormBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.UgUnit", "UgUnit")
                        .WithMany("FormBUgUnits")
                        .HasForeignKey("UgUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormB");

                    b.Navigation("UgUnit");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormC", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ResearchArea", "ResearchArea")
                        .WithMany()
                        .HasForeignKey("ResearchAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchArea");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCGuestUnit", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", "FormC")
                        .WithMany("FormCGuestUnits")
                        .HasForeignKey("FormCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.GuestUnit", "GuestUnit")
                        .WithMany("FormCGuestUnits")
                        .HasForeignKey("GuestUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormC");

                    b.Navigation("GuestUnit");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCLongResearchEquipment", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", "FormC")
                        .WithMany("FormCLongResearchEquipments")
                        .HasForeignKey("FormCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ResearchEquipment", "ResearchEquipment")
                        .WithMany("FormCLongResearchEquipments")
                        .HasForeignKey("ResearchEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormC");

                    b.Navigation("ResearchEquipment");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCPort", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", "FormC")
                        .WithMany("FormCPorts")
                        .HasForeignKey("FormCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.Port", "Port")
                        .WithMany("FormCPorts")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormC");

                    b.Navigation("Port");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCResearchEquipment", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", "FormC")
                        .WithMany("FormCResearchEquipments")
                        .HasForeignKey("FormCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ResearchEquipment", "ResearchEquipment")
                        .WithMany("FormCResearchEquipments")
                        .HasForeignKey("ResearchEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormC");

                    b.Navigation("ResearchEquipment");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCResearchTask", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", "FormC")
                        .WithMany("FormCResearchTasks")
                        .HasForeignKey("FormCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ResearchTask", "ResearchTask")
                        .WithMany("FormCResearchTasks")
                        .HasForeignKey("ResearchTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormC");

                    b.Navigation("ResearchTask");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCShortResearchEquipment", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", "FormC")
                        .WithMany("FormCShortResearchEquipments")
                        .HasForeignKey("FormCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.ResearchEquipment", "ResearchEquipment")
                        .WithMany("FormCShortResearchEquipments")
                        .HasForeignKey("ResearchEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormC");

                    b.Navigation("ResearchEquipment");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCSpubTask", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", "FormC")
                        .WithMany("FormCSpubTasks")
                        .HasForeignKey("FormCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.SpubTask", "SpubTask")
                        .WithMany("FormCSpubTasks")
                        .HasForeignKey("SpubTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormC");

                    b.Navigation("SpubTask");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormCUgUnit", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", "FormC")
                        .WithMany("FormCUgUnits")
                        .HasForeignKey("FormCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.UgUnit", "UgUnit")
                        .WithMany("FormCUgUnits")
                        .HasForeignKey("UgUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormC");

                    b.Navigation("UgUnit");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Permission", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormA", null)
                        .WithMany("Permissions")
                        .HasForeignKey("FormAId");

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormB", null)
                        .WithMany("Permissions")
                        .HasForeignKey("FormBId");

                    b.HasOne("ResearchCruiseApp_API.Domain.Entities.FormC", null)
                        .WithMany("Permissions")
                        .HasForeignKey("FormCId");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Contract", b =>
                {
                    b.Navigation("FormAContracts");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Cruise", b =>
                {
                    b.Navigation("CruiseApplications");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.CruiseApplication", b =>
                {
                    b.Navigation("CruiseApplicationEffects");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormA", b =>
                {
                    b.Navigation("FormAContracts");

                    b.Navigation("FormAGuestUnits");

                    b.Navigation("FormAPublications");

                    b.Navigation("FormAResearchTasks");

                    b.Navigation("FormASpubTasks");

                    b.Navigation("FormAUgUnits");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormB", b =>
                {
                    b.Navigation("CruiseDaysDetails");

                    b.Navigation("FormBGuestUnits");

                    b.Navigation("FormBLongResearchEquipments");

                    b.Navigation("FormBPorts");

                    b.Navigation("FormBResearchEquipments");

                    b.Navigation("FormBShortResearchEquipments");

                    b.Navigation("FormBUgUnits");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.FormC", b =>
                {
                    b.Navigation("CollectedSamples");

                    b.Navigation("Contracts");

                    b.Navigation("CruiseDaysDetails");

                    b.Navigation("FormCGuestUnits");

                    b.Navigation("FormCLongResearchEquipments");

                    b.Navigation("FormCPorts");

                    b.Navigation("FormCResearchEquipments");

                    b.Navigation("FormCResearchTasks");

                    b.Navigation("FormCShortResearchEquipments");

                    b.Navigation("FormCSpubTasks");

                    b.Navigation("FormCUgUnits");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.GuestUnit", b =>
                {
                    b.Navigation("FormAGuestUnits");

                    b.Navigation("FormBGuestUnits");

                    b.Navigation("FormCGuestUnits");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Port", b =>
                {
                    b.Navigation("FormBPorts");

                    b.Navigation("FormCPorts");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.Publication", b =>
                {
                    b.Navigation("FormAPublications");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.ResearchArea", b =>
                {
                    b.Navigation("FormsA");

                    b.Navigation("FormsB");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.ResearchEquipment", b =>
                {
                    b.Navigation("FormBLongResearchEquipments");

                    b.Navigation("FormBResearchEquipments");

                    b.Navigation("FormBShortResearchEquipments");

                    b.Navigation("FormCLongResearchEquipments");

                    b.Navigation("FormCResearchEquipments");

                    b.Navigation("FormCShortResearchEquipments");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.ResearchTask", b =>
                {
                    b.Navigation("FormAResearchTasks");

                    b.Navigation("FormCResearchTasks");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.SpubTask", b =>
                {
                    b.Navigation("FormASpubTasks");

                    b.Navigation("FormCSpubTasks");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Domain.Entities.UgUnit", b =>
                {
                    b.Navigation("FormAUgUnits");

                    b.Navigation("FormBUgUnits");

                    b.Navigation("FormCUgUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
